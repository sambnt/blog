# Exports our RESULTS
#+OPTIONS: d:t

#+BEGIN_SRC emacs-lisp :exports results :results silent
  (direnv-allow)
  (direnv-update-environment)
  (org-babel-tangle)
#+END_SRC

* Compilation

Consider a simple C program:

#+NAME: simple-c
#+BEGIN_SRC c :tangle .generated/simple.c
#include <stdio.h>

int main() {
    printf("Hello World!");

    return 0;
}
#+END_SRC

This file is a high-level description of our program. The computer cannot execute this file.

We use a compiler to produce an executable file from our source file:

#+begin_src mermaid :file high-level.png :exports results :dir .generated
flowchart LR
    A{{"Source File"}}
    B["Compiler"]
    C{{"Executable"}}
    A --> B
    B --> C
    style B fill:#FFD600,stroke:#000000
    style A fill:#FFFFFF,stroke:#000000
    style C fill:#FFFFFF,stroke:#000000
#+end_src

#+RESULTS:
[[file:.generated/high-level.png]]

The compiler runs (at least) the following phases:
  1. Preprocess
  2. Compile
  3. Assemble
  4. Link

#+begin_src mermaid :file stages.png :exports results :dir .generated
%%{init: {'themeVariables': { 'edgeLabelBackground': 'white'}}}%%
flowchart TD
    A{{"Source File"}}
    B{{"Processed Source File"}}
    C{{"Assembly File"}}
    D{{"Object File"}}
    E{{"Executable File"}}
    A --Preprocess--> B
    B --Compile--> C
    C --Assemble--> D
    D --Link--> E
    style A fill:#FFFFFF,stroke:#000000
    style B fill:#FFFFFF,stroke:#000000
    style C fill:#FFFFFF,stroke:#000000
    style D fill:#FFFFFF,stroke:#000000
    style E fill:#FFFFFF,stroke:#000000
#+end_src

#+RESULTS:
[[file:.generated/stages.png]]

** Preprocess

In this phase the preprocessor (amongst other things):
  - removes comments,
  - copies the contents of "#include" files into the source, and
  - resolves other "#" directives like "#define" and "#ifdef".

** Compile

The compiler takes our preprocessed source file and produces assembly code. Assembly code is still not executable by a computer.

** Assemble

The assembler takes our assembly code and produces object code. Object code is machine-readable binary code.

When we reference external symbols (like ~printf~), which aren't declared in our source file, placeholders are left in the object code, ready to be resolved by the linker.

** Link

The linker takes object code and "links" it together to resolve any unresolved symbols. For example, the linker will link our program with the C standard library to resolve ~printf~.

We can stop our compiler at the assembly stage to confirm that printf is indeed not present in the code:

#+begin_src sh :results verbatim :wrap src asm :exports both :dir .generated
g++ -S simple.c -o /dev/stdout
#+end_src

#+RESULTS:
#+begin_src asm
	.file	"simple.c"
	.text
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"Hello World!"
	.section	.text.startup,"ax",@progbits
	.p2align 4
	.globl	main
	.type	main, @function
main:
.LFB30:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	leaq	.LC0(%rip), %rsi
	movl	$2, %edi
	xorl	%eax, %eax
	call	__printf_chk@PLT
	xorl	%eax, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE30:
	.size	main, .-main
	.ident	"GCC: (GNU) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
#+end_src

The labels down the left-side of the code define *symbols*.

We call ~printf~ with the line:

#+begin_src asm
	call	__printf_chk@PLT
#+end_src

But there is no label to define the *symbol* ~printf~.

It is only at the linking stage that this reference is resolved.

[[file:./static/placeholder.png]]

(from https://www.tenouk.com/Bufferoverflowc/Bufferoverflow1c.html).

When we provide multiple source files, each is compiled to an object file, and these are linked to form the final executable:

#+begin_src mermaid :file multiple.png :exports results :dir .generated
%%{init: {'themeVariables': { 'edgeLabelBackground': 'white'}}}%%
flowchart LR
    S1{{"Source File"}}
    S2{{"Source File"}}
    O1{{"Object File"}}
    O2{{"Object File"}}
    O3{{"Object File"}}
    C["Linker"]
    E{{"Executable"}}
    S1 --Compile--> O1
    S2 --Compile--> O2
    L(" ") --External Library--> O3
    O1 --> C
    O2 --> C
    O3 --> C
    C --Link--> E
    style S1 fill:#FFFFFF,stroke:#000000
    style S2 fill:#FFFFFF,stroke:#000000
    style O1 fill:#FFFFFF,stroke:#000000
    style O2 fill:#FFFFFF,stroke:#000000
    style O3 fill:#FFFFFF,stroke:#000000
    style C fill:#FFFFFF,stroke:#000000
    style L fill:#FFFFFF,stroke:#000000
    style E fill:#FFFFFF,stroke:#000000
#+end_src

#+RESULTS:
[[file:.generated/multiple.png]]

External libraries (like the C standard library, or SDL) are typically provided pre-compiled as ".a" (an (a)rchive of object files), or ".lib" files. These files are ready to be linked into the final executable by the linker.
